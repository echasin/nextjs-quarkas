import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import { useMutation, useQuery } from '@apollo/client'

import { CreateNewStudentDocument, NewOrganizationDocument, StudentInputInput, StudentsDocument, StudentsQuery, StudentsQueryVariables } from '@/gql/graphql'
import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid'
import { Box, Button, Divider, Input, Modal, Stack, TextField, Typography } from '@mui/material'
import { useState } from 'react'
import { Field, FieldArray, Form, FormLoader, getFieldProps, Reset, ResponseMessage, Submit } from 'apollo-form'
import * as Yup from 'yup';
import { redirect } from 'next/navigation';
import { useRouter } from 'next/router'

export default function Home() {


  const styled = {
    position: 'absolute' as 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 400,
    bgcolor: 'background.paper',
    border: '2px solid #000',
    boxShadow: 24,
    p: 4,
  };
  
  const router = useRouter()

  const [open, setOpen] = useState(false);

  const { data, error, loading } = useQuery(StudentsDocument);

  if (error) {
    console.log('Error')
  }

  if (loading) {
    console.log('Loading')
  }

 const [addTodo] = useMutation(CreateNewStudentDocument);
 
 const createStudentMutation =  (values: any) => {
  console.log(values)
  const studentJson={
    "studentName": values.values.studentName,
    "testscores": [
    ]
   }

  const student: any={
    "values": {
      "studentIdentifier": "5555555",
      "studentJson": studentJson
    }
  }
  
   console.log(values)
   addTodo({ variables: student });  
   setOpen(false);
 };

 interface CreatePlanFormValues {
  studentName: string;
}

const validationSchema = Yup.object().shape({
  studentName: Yup.string().required()
});

const initialState = {
  studentName: ''
};

const newStudentPage =  () => {
  router.push('newStudent');
};

const editStudentPage =  (id: number) => {
  console.log(id)
  router.push({pathname: 'editStudent/[id]' , query: { id: id }});
};


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Button 
          variant="contained"
          onClick={newStudentPage}>
            New Student
      </Button>

          { data?.students?.map(item=> { 
            return (
              <> 
                <Stack direction='row'>
                  <Typography> { item?.id} </Typography>
                  <Typography> { item?.studentIdentifier} </Typography>
                  <Typography> { item?.studentJson} </Typography>
                  <Button 
                    variant="contained"
                    onClick={(e)=> editStudentPage(item?.id)}>
                      Edit
                  </Button>
                </Stack>  
              </>
            );
           })} 
    </>
  )
}

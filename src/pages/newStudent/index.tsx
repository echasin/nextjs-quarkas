import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import { useMutation, useQuery } from '@apollo/client'

import { CreateNewStudentDocument, NewOrganizationDocument, StudentInputInput, StudentsDocument, StudentsQuery, StudentsQueryVariables } from '@/gql/graphql'
import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid'
import { Box, Button, Card, Divider, Grid, Input, Modal, Stack, styled, TextField, Typography } from '@mui/material'
import { useState } from 'react'
import { Field, FieldArray, Form, FormLoader, getFieldProps, Reset, ResponseMessage, Submit } from 'apollo-form'
import * as Yup from 'yup';
import { useRouter } from 'next/router'
import { CreateNewStudent } from 'graphql/gql/studnet'

const MyButton = styled(Button)({
  textTransform: 'none', 
});

export default function NewStudent() {
    
    const router = useRouter()

     //const [addNewStudent] = useMutation(CreateNewStudentDocument);// codegen
     const [addNewStudent] = useMutation(CreateNewStudent);

     
     const createStudentMutation =  (values: any) => {
      const studentJson={
        "studentName": values.values.studentName,
        "testscores": [
        ]
       }
    
      const student: any={
        "values": {
          "studentIdentifier": "5555555",
          "studentJson": JSON.stringify(studentJson)
        }
      }      
      addNewStudent({ variables: student });  
       studentPage();
     };
    
    interface CreatePlanFormValues {
      studentName: string;
    }
    
    const validationSchema = Yup.object().shape({
      studentName: Yup.string().required()
    });
    
    const initialState = {
      studentName: ''
    };

    const studentPage =  () => {
    router.push('/');
    };

  return (
    <>
      <Head>
        <title>Create New Student</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Grid container sx={{ p:2 , m:10 }}>
        <Grid item xs={2} >
        </Grid>  
        <Grid item xs={8} >
        <Card sx={{ p:2 , m:10 }}>
        <Typography align='right'  >    
          <MyButton 
            variant="contained"
            onClick={studentPage}>
              Student Page
          </MyButton>
      </Typography>
          
      <Form<CreatePlanFormValues>
                  name='CreatePlanForm'
                  enableReinitialize
                  initialState={initialState}
                  validationSchema={validationSchema}
                  onSubmit={async ({ values }, form) => {
                      try {
                        await createStudentMutation({ values });
                        form.reset();
                      } catch (e) {
                        console.log('error');
                      }
                  }}
                >
                  <Box sx={{ pt : 3}}>
                    <Field name='studentName'>{({ field }) => <Input {...getFieldProps(field)} placeholder='Student Name' />}</Field>
                    <ResponseMessage>{({ error }) => <span>{error}</span>}</ResponseMessage>
                  </Box>  
                  <FormLoader>
                      {({ loading }) => (
                        <span style={{ display: loading ? 'block' : 'none' }}>Loading...</span>
                      )}
                  </FormLoader>
                  <Box sx={{ pt : 3}}>
                    <Submit>
                        {({ disabled }) => (
                          <MyButton type='submit' disabled={disabled} >
                              Create Student
                          </MyButton>
                        )}
                    </Submit>
                    <Reset>
                        {({ disabled }) => (
                          <MyButton type='reset' disabled={disabled}  color="error" >
                              Reset
                          </MyButton>
                        )}
                    </Reset>
                  </Box>  
                </Form>
          </Card>              
        </Grid>  
      </Grid>   
      
    </>
  )
}

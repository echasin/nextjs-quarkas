import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import { useMutation, useQuery } from '@apollo/client'

import { CreateNewStudentDocument, GetOneStudentDocument, NewOrganizationDocument, StudentInputInput, StudentsDocument, StudentsQuery, StudentsQueryVariables, UpdateStudentDocument } from '@/gql/graphql'
import { DataGrid, GridColDef, GridRenderCellParams, GridValueGetterParams } from '@mui/x-data-grid'
import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, Input, Modal, Stack, TextField, Typography } from '@mui/material'
import { useEffect, useState } from 'react'
import { Field, FieldArray, Form, FormLoader, getFieldProps, Reset, ResponseMessage, Submit } from 'apollo-form'
import * as Yup from 'yup';
import { useRouter } from 'next/router'

export default function EditStudent() {
    
    const router = useRouter()

    console.log(router.query.id);

    var id = router.query.id;

    console.log(Number(id));
    
    const { data, error, loading } = useQuery(GetOneStudentDocument, {
      variables: { id:  Number(id) },
    });

    if (error) {
      console.log('Error')
    }
  
    if (loading) {
      console.log('Loading')
    }

    let rows: {course: string, score: number}[] = [];

    if (data) {
       rows =  JSON.parse(data?.student?.studentJson as string).testscores;
    }

    const studentPage =  () => {
    router.push('/');
    };

    const [open, setOpen] = useState(false);

    const handleEditOpen = () => {
      setOpen(true);
    };

    const handleEditClose = () => {
      setOpen(false);
    };

    const [updateStudent] = useMutation(UpdateStudentDocument);

    const saveNewTest = (values: any) => {      
      rows=[...rows, values.values];

      let studentJson=JSON.parse(data?.student?.studentJson as string)
      studentJson.testscores=rows;

      const student: any={
        "data": {
          "id": data?.student?.id,
          "studentIdentifier": data?.student?.studentIdentifier,
          "studentJson": JSON.stringify(studentJson)
        }
      } 
      console.log(student)
      updateStudent({ variables: student })
      console.log(student)

      setOpen(false);
    };

    const columns: GridColDef[] = [
      { field: 'course', headerName: 'course', width: 200 },
      { field: 'score', headerName: 'score', width: 150 },
      {
        field: 'Action',
        headerName: 'Action',
        width: 250,
        renderCell: (params: GridRenderCellParams<Date>) => (
          <Stack direction='row'>
            <Button
              variant="contained"
              size="small"
              style={{ marginLeft: 16 }}
              tabIndex={params.hasFocus ? 0 : -1}
              onClick={handleEditOpen}
            >
              Edit
            </Button>
            <Button
              variant="contained"
              size="small"
              style={{ marginLeft: 16 }}
              tabIndex={params.hasFocus ? 0 : -1}
              onClick={handleEditOpen}
              color="error"
            >
              Delete
            </Button>
          </Stack>
        ),
      }
    ];

    interface CreateFormValues {
      course: string;
      score: number | null;
    }
    
    const validationSchema = Yup.object().shape({
      course: Yup.string().required(),
      score: Yup.number().required()
    });
    
    const initialState = {
      course: '',
      score: null
    };

  return (
    <>
      <Head>
        <title>Create New Student</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Typography align='center' sx={{ p:2 }} >    
      <Button 
          variant="contained"
          onClick={studentPage}
          >
             Student Page
      </Button>
      </Typography>

      <Stack direction='row' spacing={5}>
        <Typography> Student Identifier:   </Typography>
        <Typography> { data?.student?.studentIdentifier} </Typography>
      </Stack>

      <Divider sx={{ p:2 }} />
    
      <Stack direction='row' spacing={50} sx={{ p:2 }} >
        <Typography> Test   </Typography>
        <Button 
          variant="contained"
          onClick={handleEditOpen}
          color="success">
             New Test 
        </Button>
      </Stack>

    <div style={{ height: 400, width: '100%' }}>
      <DataGrid
        rows={rows}
        getRowId={(row) => row.course}
        columns={columns}
        pageSize={5}
        rowsPerPageOptions={[5]}
      />
    </div>

    <Dialog open={open} onClose={handleEditClose}>
        <DialogTitle>Edit Test</DialogTitle>
        <DialogContent>
          <DialogContentText>
            
          </DialogContentText>
            <Form<CreateFormValues>
                  name='CreatePlanForm'
                  enableReinitialize
                  initialState={initialState}
                  validationSchema={validationSchema}
                  onSubmit={async ({ values }, form) => {
                      try {
                        await saveNewTest({ values });
                        form.reset();
                      } catch (e) {
                        console.log(e);
                      }
                  }}
                >
                  <Box sx={{ pt : 3}}>
                    <Field name='course'>{({ field }) => <Input {...getFieldProps(field)} placeholder='Course Name' />}</Field>
                    <Field name='score'>{({ field }) => <Input {...getFieldProps(field)} placeholder='Score' />}</Field>
                    <ResponseMessage>{({ error }) => <span>{error}</span>}</ResponseMessage>
                  </Box>  
                  <FormLoader>
                      {({ loading }) => (
                        <span style={{ display: loading ? 'block' : 'none' }}>Loading...</span>
                      )}
                  </FormLoader>
                  <Box sx={{ pt : 3}}>
                    <Submit>
                        {({ disabled }) => (
                          <Button type='submit' disabled={disabled} >
                              Add Test
                          </Button>
                        )}
                    </Submit>
                    <Reset>
                        {({ disabled }) => (
                          <Button type='reset' disabled={disabled}  color="error" >
                              Reset
                          </Button>
                        )}
                    </Reset>
                  </Box>  
                </Form>       
        </DialogContent>
      </Dialog>


    </>
  )
}
